from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.templating import Jinja2Templates
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
import time
import json
import uuid
import logging
import asyncio

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Import modules
from data_cleaner import process_scenario
from cdt_classifier import classify_cdt_categories
from icd_classifier import classify_icd_categories
from supabase import MedicalCodingDB
from inspector import analyze_dental_scenario
from icd_inspector import analyze_icd_scenario

# Import CDT Topic Functions
from topics.diagnostics import activate_diagnostic
from topics.preventive import activate_preventive
from topics.restorative import activate_restorative
from topics.endodontics import activate_endodontic
from topics.periodontics import activate_periodontics
from topics.prosthodonticsremovable import activate_prosthodonticsremovable
from topics.maxillofacialprosthetics import activate_maxillofacial_prosthetics
from topics.implantservices import activate_implant_services
from topics.prosthodonticsfixed import activate_prosthodonticsfixed
from topics.oralandmaxillofacialsurgery import activate_oral_maxillofacial_surgery
from topics.orthodontics import activate_orthodontic
from topics.adjunctivegeneralservices import activate_adjunctive_general_services

# Initialize FastAPI app
app = FastAPI(title="Dental Code Extractor API")
templates = Jinja2Templates(directory="templates")
app.mount("/static", StaticFiles(directory="static"), name="static")

# Track active analyses by ID
active_analyses = {}

# CDT Topic and Subtopic Mappings
CDT_TOPICS = {
    "D0100-D0999": {
        "name": "Diagnostic",
        "function": activate_diagnostic,
    },
    "D1000-D1999": {
        "name": "Preventive",
        "function": activate_preventive,
    },
    "D2000-D2999": {
        "name": "Restorative",
        "function": activate_restorative,
    },
    "D3000-D3999": {
        "name": "Endodontics",
        "function": activate_endodontic,
    },
    "D4000-D4999": {
        "name": "Periodontics",
        "function": activate_periodontics,
    },
    "D5000-D5899": {
        "name": "Prosthodontics Removable",
        "function": activate_prosthodonticsremovable,
    },
    "D5900-D5999": {
        "name": "Maxillofacial Prosthetics",
        "function": activate_maxillofacial_prosthetics,
    },
    "D6000-D6199": {
        "name": "Implant Services",
        "function": activate_implant_services,
    },
    "D6200-D6999": {
        "name": "Prosthodontics Fixed",
        "function": activate_prosthodonticsfixed,
    },
    "D7000-D7999": {
        "name": "Oral and Maxillofacial Surgery",
        "function": activate_oral_maxillofacial_surgery,
    },
    "D8000-D8999": {
        "name": "Orthodontics",
        "function": activate_orthodontic,
    },
    "D9000-D9999": {
        "name": "Adjunctive General Services",
        "function": activate_adjunctive_general_services,
    },
}

# Add simple implementation for routes
@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    """Render the home page."""
    return templates.TemplateResponse("index.html", {"request": request})

@app.post("/analyze", response_class=HTMLResponse)
async def analyze_web(request: Request, scenario: str = Form(...)):
    """Process the dental scenario and display results."""
    try:
        # Step 1: Create a record ID
        record_id = str(uuid.uuid4())
        print("=== STARTING DENTAL SCENARIO ANALYSIS ===")
        print(f"Input scenario: {scenario}")
        print(f"Generated record ID: {record_id}")
        
        # Step 2: Clean the data using data_cleaner
        print("\n=== CLEANING DATA ===")
        start_time = time.time()
        processed_result = process_scenario(scenario)
        processed_scenario = processed_result["standardized_scenario"]
        print(f"Cleaned scenario: {processed_scenario}")
        
        # Step 3: Store in database
        print("\n=== STORING IN DATABASE ===")
        db = MedicalCodingDB()
        
        # First record with just user input
        db.create_analysis_record(
            record_id=record_id,
            user_question=scenario,
            processed_clean_data="",
            cdt_result="{}",
            icd_result="{}"
        )
        print("Initial record created in database")
        
        # Update with processed data
        db.update_processed_scenario(record_id, processed_scenario)
        print("Database updated with cleaned data")
        
        # Step 4: Analyze CDT Codes
        cdt_result = classify_cdt_categories(processed_scenario)
        
        # Step 5: Activate CDT Topics
        range_codes = cdt_result["range_codes_string"].split(",")
        topics_results = {}
        
        # Process each identified code range
        for range_code in range_codes:
            clean_range = range_code.strip()
            if clean_range in CDT_TOPICS:
                topic_info = CDT_TOPICS[clean_range]
                topic_name = topic_info["name"]
                
                # Continue with topic activation as in the original code
                try:
                    # Pass the processed scenario directly to the topic function
                    # Make sure we handle errors and empty responses
                    try:
                        activation_result = topic_info["function"](processed_scenario)
                        if not activation_result:
                            print(f"  Warning: Empty result from {topic_name}")
                            activation_result = {
                                "code_range": clean_range,
                                "subtopic": topic_name,
                                "codes": [f"No specific codes identified for {topic_name}"]
                            }
                    except Exception as topic_error:
                        print(f"  Error in {topic_name}: {str(topic_error)}")
                        activation_result = {
                            "code_range": clean_range,
                            "subtopic": topic_name,
                            "error": str(topic_error),
                            "codes": [f"Error processing {topic_name}"]
                        }
                    
                    # End of inner try-except
                    # Store the results
                    topics_results[clean_range] = {
                        "name": topic_name,
                        "result": activation_result
                    }
                
                    # Print the activation result
                    print(f"  Result: {json.dumps(activation_result, indent=2)}")
                
                    # Display specific codes if available
                    if isinstance(activation_result, dict) and 'codes' in activation_result:
                        print("  Specific Codes:")
                        for code in activation_result['codes']:
                            print(f"  - {code}")
                except Exception as e:
                    print(f"Error activating {topic_name}: {str(e)}")
                    topics_results[clean_range] = {
                        "name": topic_name,
                        "result": {"error": str(e)}
                    }
            else:
                print(f"Warning: No topic function found for range code {clean_range}")
        
        # Step 6: Analyze ICD Codes
        icd_result = classify_icd_categories(processed_scenario)
        
        # Step 7: Final validation with inspectors
        inspector_cdt_results = analyze_dental_scenario(processed_scenario, topics_results)
        inspector_icd_results = analyze_icd_scenario(processed_scenario, icd_result.get("icd_topics_results", {}))
        
        # Save results to database
        # Format and combine CDT results
        combined_cdt_results = {
            "cdt_classifier": cdt_result,
            "topics": topics_results
        }
        
        # Convert to JSON string for database
        combined_cdt_json = json.dumps(combined_cdt_results, default=str)
        combined_icd_json = json.dumps(icd_result, default=str)
        
        # Save results to database
        db.update_analysis_results(record_id, combined_cdt_json, combined_icd_json)
        
        # Calculate processing time
        processing_time = time.time() - start_time
        print(f"\nTotal processing time: {round(processing_time, 2)} seconds")
        print("=== ANALYSIS COMPLETE ===")
        
        # Return response with all results
        return templates.TemplateResponse("index.html", {
            "request": request,
            "scenario": scenario,
            "processed_scenario": processed_scenario,
            "cdt_result": cdt_result,
            "topics_results": topics_results,
            "icd_result": icd_result,
            "cdt_inspector_codes": inspector_cdt_results.get("codes", []),
            "cdt_inspector_explanation": inspector_cdt_results.get("explanation", "No explanation provided"),
            "icd_inspector_codes": inspector_icd_results.get("codes", []),
            "icd_inspector_explanation": inspector_icd_results.get("explanation", "No explanation provided"),
            "CDT_TOPICS": CDT_TOPICS,
            "results": {
                "processing_time": round(processing_time, 2),
                "record_id": record_id
            }
        })
        
    except Exception as e:
        logger.error(f"Error in analysis: {str(e)}")
        return templates.TemplateResponse("index.html", {
            "request": request,
            "scenario": scenario,
            "error": "An error occurred while processing your request",
            "error_details": str(e)
        })

# Endpoint to check analysis status (for AJAX polling)
@app.get("/status/{analysis_id}", response_class=JSONResponse)
async def get_analysis_status(analysis_id: str):
    """Get the status of an ongoing analysis."""
    if analysis_id in active_analyses:
        return active_analyses[analysis_id]
    return {"status": "not_found"}

def analyze_dental_scenario_cli(scenario):
    """Process a dental scenario, clean data, and store in database with terminal output."""
    try:
        # STEP 1: CLEAN AND SAVE DATA
        print("=== STEP 1: CLEAN AND SAVE DATA ===")
        print(f"Input: {question}")
        
        # Basic validation
        if not scenario or not scenario.strip():
            print("Error: Empty scenario provided")
            return
        
        # Create record ID for tracking
        record_id = str(uuid.uuid4())
        print(f"Generated record ID: {record_id}")
        
        # Initialize database connection
        db = MedicalCodingDB()
        
        # Save initial record
        db.create_analysis_record(
            record_id=record_id,
            user_question=scenario,
            processed_clean_data="",
            cdt_result="{}",
            icd_result="{}"
        )
        print("Initial record created in database")
        
        # Process scenario using data_cleaner
        print("\n=== CLEANING DATA ===")
        start_time = time.time()
        processed_result = process_scenario(scenario)
        processed_scenario = processed_result["standardized_scenario"]
        print(f"Cleaned data: {processed_scenario}")
        
        # Update database with processed scenario
        db.update_processed_scenario(record_id, processed_scenario)
        print("Database updated with cleaned data ✅")
        
        # STEP 2: IDENTIFY CDT CODE RANGES
        print("\n=== STEP 2: IDENTIFY CDT CODE RANGES ===")
        cdt_result = classify_cdt_categories(processed_scenario)
        print(f"CDT Range Codes: {cdt_result.get('range_codes_string', '')}")
        
        # Print each code range with explanation
        for i, code_range in enumerate(cdt_result["code_ranges"]):
            print(f"\nRange {i+1}: {code_range['code_range']}")
            print(f"Explanation: {cdt_result['explanations'][i]}")
            if cdt_result['doubts'][i]:
                print(f"Doubt: {cdt_result['doubts'][i]}")
        
        # Format CDT classifier results as structured JSON
        cdt_classifier_json = {
            "code_ranges": cdt_result["code_ranges"],
            "explanations": cdt_result["explanations"],
            "doubts": cdt_result["doubts"],
            "range_codes_string": cdt_result.get('range_codes_string', '')
        }
        
        # Display the JSON structure
        print("\nCDT classifier results JSON:")
        print(json.dumps(cdt_classifier_json, indent=2, default=str))
        
        # STEP 3: ACTIVATE CDT TOPICS BASED ON CODE RANGES
        print("\n=== STEP 3: ACTIVATE CDT TOPICS ===")
        # Get the relevant code ranges identified in step 2
        range_codes = cdt_result["range_codes_string"].split(",")
        topics_results = {}
        
        # Process each identified code range
        for range_code in range_codes:
            # Clean the range code (remove any whitespace)
            clean_range = range_code.strip()
            
            # Check if this range is in our CDT_TOPICS mapping
            if clean_range in CDT_TOPICS:
                topic_info = CDT_TOPICS[clean_range]
                topic_name = topic_info["name"]
                topic_function = topic_info["function"]
                
                print(f"Activating topic: {topic_name} ({clean_range})")
                
                try:
                    # Pass the processed scenario directly to the topic function
                    # Make sure we handle errors and empty responses
                    try:
                        activation_result = topic_function(processed_scenario)
                        if not activation_result:
                            print(f"  Warning: Empty result from {topic_name}")
                            activation_result = {
                                "code_range": clean_range,
                                "subtopic": topic_name,
                                "codes": [f"No specific codes identified for {topic_name}"]
                            }
                    except Exception as topic_error:
                        print(f"  Error in {topic_name}: {str(topic_error)}")
                        activation_result = {
                            "code_range": clean_range,
                            "subtopic": topic_name,
                            "error": str(topic_error),
                            "codes": [f"Error processing {topic_name}"]
                        }
                    
                    # End of inner try-except
                    # Store the results
                    topics_results[clean_range] = {
                        "name": topic_name,
                        "result": activation_result
                    }
                
                    # Print the activation result
                    print(f"  Result: {json.dumps(activation_result, indent=2)}")
                
                    # Display specific codes if available
                    if isinstance(activation_result, dict) and 'codes' in activation_result:
                        print("  Specific Codes:")
                        for code in activation_result['codes']:
                            print(f"  - {code}")
                except Exception as e:
                    print(f"Error activating {topic_name}: {str(e)}")
                    topics_results[clean_range] = {
                        "name": topic_name,
                        "result": {"error": str(e)}
                    }
            else:
                print(f"Warning: No topic function found for range code {clean_range}")
        
        # Display the topics results JSON
        print("\nTopic activation results JSON:")
        print(json.dumps(topics_results, indent=2, default=str))
        
        # Combine CDT classifier and topics results into a single JSON structure
        combined_cdt_results = {
            "cdt_classifier": cdt_classifier_json,
            "topics": topics_results
        }
        
        # Convert to JSON string
        combined_cdt_json = json.dumps(combined_cdt_results, default=str)
        
        # STEP 4: INVOKE INSPECTOR TO VALIDATE CDT CODES
        print("\n=== STEP 4: VALIDATE CDT CODES WITH INSPECTOR ===")
        # Get the topic analysis results from the combined JSON
        inspector_cdt_results = analyze_dental_scenario(processed_scenario, topics_results)
        
        # Format and display results
        print("\nInspector CDT validation results:")
        print(f"Validated CDT codes: {inspector_cdt_results.get('codes', [])}")
        print(f"Explanation: {inspector_cdt_results.get('explanation', 'No explanation provided')}")
        
        # STEP 5: IDENTIFY ICD CATEGORIES & CODES
        print("\n=== STEP 5: IDENTIFY ICD CATEGORIES & CODES ===")
        # Check if the scenario mentions diagnoses or medical conditions
        icd_result = classify_icd_categories(processed_scenario)
        print(f"ICD Categories: {icd_result.get('category_numbers_string', '')}")
        
        # Print each category with explanation
        for i, category in enumerate(icd_result["categories"]):
            print(f"\nCategory {i+1}: {category}")
            print(f"Codes:")
            for code in icd_result["code_lists"][i]:
                print(f"  - {code}")
            print(f"Explanation: {icd_result['explanations'][i]}")
            if icd_result['doubts'][i]:
                print(f"Doubt: {icd_result['doubts'][i]}")
        
        # Get the ICD topic results
        icd_topics_results = icd_result.get("icd_topics_results", {})
        
        # Display the ICD topics results
        print("\nICD Topics Results:")
        for category_num, topic_data in icd_topics_results.items():
            category_name = topic_data.get("name", "Unknown")
            print(f"Category {category_num}: {category_name}")
            print(f"Result: {topic_data.get('result', 'No result')}")
            
            # Print the parsed result if available
            parsed_result = topic_data.get("parsed_result", {})
            if parsed_result:
                print(f"  Code: {parsed_result.get('code', 'No code')}")
                print(f"  Explanation: {parsed_result.get('explanation', 'No explanation')}")
                print(f"  Doubt: {parsed_result.get('doubt', 'No doubt')}")
        
        # Convert to JSON string
        combined_icd_json = json.dumps(icd_result, default=str)
        
        # STEP 6: INVOKE ICD INSPECTOR TO VALIDATE ICD CODES
        print("\n=== STEP 6: VALIDATE ICD CODES WITH INSPECTOR ===")
        # Get the ICD topic analysis results
        inspector_icd_results = analyze_icd_scenario(processed_scenario, icd_topics_results)
        
        # Format and display results
        print("\nInspector ICD validation results:")
        print(f"Validated ICD codes: {inspector_icd_results.get('codes', [])}")
        print(f"Explanation: {inspector_icd_results.get('explanation', 'No explanation provided')}")
        
        # STEP 7: SAVE RESULTS TO DATABASE
        print("\n=== STEP 7: SAVE RESULTS TO DATABASE ===")
        # Save CDT results
        db.update_analysis_results(record_id, combined_cdt_json, combined_icd_json)
        print(f"Combined CDT and ICD results saved to database for ID: {record_id} ✅")
        
        # Calculate processing time
        processing_time = time.time() - start_time
        print(f"\nTotal processing time: {round(processing_time, 2)} seconds")
        print("=== ANALYSIS COMPLETE ===")
        
    except Exception as e:
        print(f"Error in analysis: {str(e)}")

# if __name__ == "__main__":
#     import uvicorn
#     # Use CLI mode when run directly with python app.py
#     user_scenario = input("Enter a dental scenario to analyze: ")
#     analyze_dental_scenario_cli(user_scenario)
# else:
#     # If imported as a module, use the FastAPI app with uvicorn
#     import uvicorn
    
#     # This will not run when the module is imported
#     # But provides guidance for running the server
#     print("To start the server, run:")
#     print("uvicorn app:app --host 0.0.0.0 --port 8000 --reload")